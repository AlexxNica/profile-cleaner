#!/bin/bash
export BLD="\e[01m" RED="\e[01;31m" GRN="\e[01;32m" YLW="\e[01;33m" NRM="\e[00m"
VERS="1.91"

if [[ -z $(which parallel) ]]; then
	echo -e ${RED}"Error: GNU Parallel is now a requirement of this script. Please install it and try again."${NRM}
	exit 1
fi

find /tmp -name 'work2do.*' -o -name 'accounting.*' -o -name "totalwork2do" 2>/dev/null | SHELL=/bin/bash parallel rm -f

echo -e "${RED}profile-cleaner v$VERS${NRM}"
echo

#	$XDG_CONFIG_HOME should be mapped to $HOME/.config
# some users may have modified it to a custom location so honor that
XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"	

do_clean() {
	echo -en "${GRN} Cleaning${NRM} ${1##*/}"
	bsize=$(ls -l "$1" | gawk {'print $5'})
	sqlite3 "$1" vacuum
	sqlite3 "$1" reindex
	asize=$(ls -l "$1" | gawk {'print $5'})
	dsize=$(echo "scale=2; ($bsize-$asize)/1048576" | bc)
	echo -e "$(tput cr)$(tput cuf 46) ${GRN}done${NRM}  -${YLW}${dsize}${NRM} Mbytes"
	echo "$name,$dsize" >> /tmp/accounting.$name
}

find_dbs() {
	find "$profilepath" -maxdepth 2 -type f| while read i; do 
	[[ -n $(file "$i" | grep SQLite) ]] && echo "${i}" >> /tmp/work2do.$name
done
}

do_chromebased() {
	[[ -h "$prepath" ]] && profilepath=$(readlink $prepath) || profilepath="$prepath"
	[[ ! -d "$profilepath" ]] &&	echo -e ${RED}"Error: no profile directory for $name found."${NRM} &&	exit 1
	echo -e " ${YLW}Cleaning profile for $name${NRM}"
	find_dbs && cat /tmp/work2do.$name | SHELL=/bin/bash parallel -k do_clean 2>/dev/null
	echo -e " ${BLD}Profile for $name reduced by ${YLW}$(grep $name /tmp/accounting.$name | gawk -F, '{ print $2 }' | paste -sd+ - | bc)${NRM} ${BLD}Mbytes.${NRM}"
	[[ -f /tmp/accounting.$name ]] && rm -f /tmp/accounting.$name
	[[ -f /tmp/work2do.$name ]] && rm -f /tmp/work2do.$name
}

do_xulbased() {
	if [[ -h "$prepath" ]]; then
		profilepath=$(readlink $prepath)
	else
		profilepath="$prepath"
	fi

	[[ "$name" = "aurora" ]] && name="heftig aurora"

	if [[ ! -d "$profilepath" ]]; then
		echo -e ${RED}"Error: cannot locate $profilepath"${NRM}
		echo -e ${BLD}"This is the default path for $name and where $0 expects to find it."${NRM}
		exit 1
	fi

	[[ ! -f $profilepath/profiles.ini ]] && echo -e ${RED}"Error: cannot locate $profilepath/profiles.ini to determine names of profiles for $name."${NRM} &&	exit 1

	# workArr is a raw list of profiles
	workArr=( $(grep '[P,p]'ath $profilepath/profiles.ini | sed -e 's/[P,p]ath=//' -e 's/\r//') )	# read each profile into the work array

	# FinalArr is a processed list of profiles
	# they are formated to abs paths since some are rel and some are abs
	index=0
	for i in "${workArr[@]}"; do
		if [ ! -d ${profilepath}/"$i" ]; then
			FinalArr[index]="$i"
		else
			FinalArr[index]="$profilepath/$i"
		fi
		index=$index+1
	done

	# here is the actual worker
	echo -e " ${YLW}Cleaning profile for $name${NRM}"
	find -L ${FinalArr[@]} -maxdepth 2 -name '*.sqlite' | SHELL=/bin/bash parallel do_clean 2>/dev/null	
	echo
	echo -e " ${BLD}Profile(s) for $name reduced by ${YLW}$(grep $name /tmp/accounting.$name | gawk -F, '{ print $2 }' | paste -sd+ - | bc)${NRM} ${BLD}Mbytes.${NRM}"
	[[ -f /tmp/accounting.$name ]] && rm -f /tmp/accounting.$name
}

do_dbbased() {
	[[ -h "$prepath" ]] && profilepath=$(readlink $prepath) || profilepath="$prepath"
	[[ ! -d "$profilepath" ]] &&	echo -e ${RED}"Error: no profile directory for $name found."${NRM} &&	exit 1
	echo -e " ${YLW}Cleaning profile for $name${NRM}"
	find ${profilepath} -maxdepth 2 -type f -name '*.db' | SHELL=/bin/bash parallel do_clean 2>/dev/null
	echo
	echo -e " ${BLD}Profile for $name reduced by ${YLW}$(grep $name /tmp/accounting.$name | gawk -F, '{ print $2 }' | paste -sd+ - | bc)${NRM} ${BLD}Mbytes.${NRM}"
	[[ -f /tmp/accounting.$name ]] && rm -f /tmp/accounting.$name
}

export -f do_clean

case "$1" in
	C|c)
		name="chromium" ; export name
		prepath="$XDG_CONFIG_HOME"/$name
		do_chromebased
		exit 0
		;;
	Gc|gC|GC|gc)
		name="google-chrome" ; export name
		prepath="$XDG_CONFIG_HOME"/$name
		do_chromebased
		exit 0
		;;	
	F|f)
		name="firefox"; export name
		prepath=$HOME/.mozilla/$name
		do_xulbased
		exit 0
		;;
	CK|cK|Ck|ck)
		name="conkeror"; export name
		prepath=$HOME/.conkeror.mozdev.org/$name
		do_xulbased
		exit 0
		;;
	H|h)
		name="heftig aurora"; export name
		prepath=$HOME/.mozilla/aurora
		do_xulbased
		exit 0
		;;
	T|t)
		name="thunderbird"; export name
		prepath=$HOME/.$name
		do_xulbased
		exit 0
		;;
	M|m)
		name="midori"; export name
		prepath="$XDG_CONFIG_HOME"/$name
		do_dbbased
		exit 0
		;;
	Q|q)
		name="qupzilla"; export name
		prepath=$HOME/.$name/profiles
		do_dbbased
		exit 0
		;;
	*)
		echo -e " ${BLD}$0 ${NRM}${GRN}{c|ck|f|gc|h|m|t|q}${NRM}"
		echo
		echo -e "  ${BLD}c) ${GRN}C${NRM}${BLD}hromium"${NRM}
		echo -e " ${BLD}ck) ${GRN}C${NRM}${BLD}on${GRN}k${NRM}${BLD}eror"${NRM}
		echo -e "  ${BLD}f) ${GRN}F${NRM}${BLD}irefox"${NRM}
		echo -e " ${BLD}gc) ${GRN}G${NRM}${BLD}oogle ${GRN}C${NRM}${BLD}hrome"${NRM}
		echo -e "  ${BLD}h) ${GRN}H${NRM}${BLD}eftig's Aurora"${NRM}
		echo -e "  ${BLD}m) ${GRN}M${NRM}${BLD}idori"${NRM}
		echo -e "  ${BLD}t) ${GRN}T${NRM}${BLD}hunderbird"${NRM}
		echo -e "  ${BLD}q) ${GRN}Q${NRM}${BLD}upZilla"${NRM}
		exit 0
		;;
esac
